@page "/modeles"
@using System.Net.Http
@using System.Text.Json
@using System.Collections.Generic
@inject IModalService Modal 

<PageTitle>Modèles</PageTitle>
<div class="">
    <h2> Models </h2>
</div>
<div class="">
    <center>
        <div class="input-group">
            <input class="form-control" type="search" id="example-search-input" placeholder="Chercher des modèles...">
        </div>
    </center>
</div>
@if (models == null)
{
    <div class= "spinner">
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>
}
else if (models.Count == 0)
{
    <p>No models found.</p>
}
else
{
   <div>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>name</th>
                <th>Status</th>
                <th>Last Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var model in models)
            {
                <tr>
                    <td>@model.modelId</td>
                    <td>@model.modelName</td>
                    <td>@model.status</td>
                    <td>@model.updatedDateTimeOffset.LocalDateTime</td>
                    <td>
                        <button class="action-btn" @onclick="@(()=>Modal.Show<DeleteModele>("Delete Model"))"><span class="bi bi-trash-fill"></span></button>
                        <button class="action-btn" type="button" @onclick="@(()=>Modal.Show<ModelesInfos>("Les informations des modèles"))"><span class="bi bi-info-circle" ></span></button>
                        <button class="action-btn" @onclick="@(()=>DeleteModel(model.modelId))"><span class="bi bi-x"></span></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </div>
}
@code {
    private List<CustomModel> models;

    protected override async Task OnInitializedAsync()
{
    try
    {
        var endpointUrl = "https://formrecogmetam.cognitiveservices.azure.com/";
        var apiKey = "4016270d4d8b494e93d355e07cf8ac57";
        var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);
        var response = await httpClient.GetAsync(endpointUrl + "/formrecognizer/v2.1/custom/models?op=full");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<CustomModelList>(json);
            models = result.modelList;
        }
        else
        {
            var errorMsg = $"Failed to retrieve models. StatusCode: {response.StatusCode}";
            throw new HttpRequestException(errorMsg);
        }
    }
    catch (HttpRequestException ex)
    {
        Console.WriteLine($"HTTP request error: {ex.Message}");
    }
    catch (JsonException ex)
    {
        Console.WriteLine($"JSON deserialization error: {ex.Message}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }
}
private async Task DeleteModel(string modelId)
{
    try
    {
        var endpointUrl = "https://formrecogmetam.cognitiveservices.azure.com/";
        var apiKey = "4016270d4d8b494e93d355e07cf8ac57";
        var httpClient = new HttpClient();
        httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", apiKey);
        var response = await httpClient.DeleteAsync(endpointUrl + "/formrecognizer/v2.1/custom/models/" + modelId);
        if (response.IsSuccessStatusCode)
        {
            models.RemoveAll(m => m.modelId == modelId);
        }
        else
        {
            var errorMsg = $"Failed to delete model. StatusCode: {response.StatusCode}";
            throw new HttpRequestException(errorMsg);
        }
    }
    catch (HttpRequestException ex)
    {
        Console.WriteLine($"HTTP request error: {ex.Message}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }
}
    private class CustomModelList
    {   public List<CustomModel> modelList { get; set; }}

    public class CustomModel
    {        public string modelId { get; set; }
        public  string modelName { get; set; }
        public string status { get; set; }
        public DateTimeOffset updatedDateTimeOffset { get; set; } }
}