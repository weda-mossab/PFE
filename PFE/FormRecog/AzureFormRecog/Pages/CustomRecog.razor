@page "/CustomRecog"

@using AzureFormRecog.Services
@using BlazorInputFile
@using AzureFormRecog.Data

@using Azure
@using Azure.AI.FormRecognizer
@using Azure.AI.FormRecognizer.Models

@inject IJSRuntime JsRuntime
@inject IFileUpload fileupload

<PageTitle>Custom Regognizer</PageTitle>


<div class="row">
   <div class="column" >
        <div class="sidebar">
            <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu" >
                <ul class="sidebar-navbar nav navbar-inverse flex-column mb-auto">
                    <li>
                        <div>
                            <h6> 1. Choose file for analysis. </h6>
                        </div>
                    </li>
                    <li>
                        <div class="file">
                             <BlazorInputFile.InputFile OnChange="SelectFile" style="margin-left: 150px;" class="inputfile"></BlazorInputFile.InputFile>
                            <div class="path" style="color:black; font-size:13px;">
                                @FileName
                            </div>
                        </div>
                    </li>
                    <br>
                    <li>
                        <div class="separator-right-pane-main root-56" >
                            <h6>2. Get prediction. </h6>
                        </div>
                    </li>
                    <li>
                        <center>
                        <div>
                            <button class="btn"><span class="bi bi-credit-card-2-front-fill icon"></span>&nbsp;  Run analysis</button>
                        </div>
                        </center>
                    </li>
                </ul>
            </div>
        </div>
    </div> 

    <div class="column2" >
        mossab
        @* <iframe src="/files/TalelMejri.pdf" style="width:95%; height:95%;">here</iframe> *@
        @* <SfPdfViewerServer DocumentPath="@FilePath" Height="500px" Width="1060px" ></SfPdfViewerServer> *@
    </div>

    <div class="column">
        <div id="sidebar-wrapper">
            <ul class="sidebar-nav nav navbar-inverse flex-column mb-auto">
                <li>
                    <div><br>
                        <h5 class="title"><span class="bi bi-braces"></span> Prediction results</h5>
                    </div>
                </li><br>
                <li>
                    @if (InvoiceMainFields == null)
                    {
                        <p><em>Data Loading...</em></p>
                    }
                    else
                    {
                    <labe class="label">Doc Main Fields</labe>
                        <table cellpadding ="10" style="width:100%;">
                            
                            <tr >
                                <td class="titles">Field ID</td>
                                <td class="titles">Field Value</td>
                            </tr>
                        @foreach(var doc in InvoiceMainFields)
                        {
                            <tr>
                                <td class="infos">@doc.DocFieldId</td>
                                <td class="fields">@doc.DocFieldValue</td>
                            </tr>
                        }
                        </table>
                        <hr />
                    }
                </li>
            </ul>
        </div> 
    </div>
</div>

@code {
    public List<DocModel> InvoiceMainFields;
    string FilePath = "No File Uploaded";
    string FileName ="";

    static string endpoint = "https://formrecogmetam.cognitiveservices.azure.com/";
    static string apiKey = "4016270d4d8b494e93d355e07cf8ac57";
    static AzureKeyCredential credential = new AzureKeyCredential(apiKey);

    async Task SelectFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.UploadFile(file);
            FileName = file.Name;
            FilePath = "C:\\Users\\MedNourBn\\Desktop\\PFE\\PFE\\FormRecog\\AzureFormRecog\\UploadloadedFiles\\" + file.Name;
                        
            var client = new FormRecognizerClient(new Uri(endpoint), credential);

            using var stream = new FileStream(FilePath, FileMode.Open);

            var options = new RecognizeCustomFormsOptions()
            {
                ContentType = FormContentType.Pdf,
                IncludeFieldElements = true
            };

            RecognizeCustomFormsOperation operation = await client.StartRecognizeCustomFormsAsync("94d18b3a-4329-4fe0-bd66-6e8c42636dc6", stream, options);

            Response<RecognizedFormCollection> operationResponse = await operation.WaitForCompletionAsync();

            RecognizedFormCollection forms = operationResponse.Value;

            InvoiceMainFields = new List<DocModel>();
            foreach (var form in forms)
            {
                foreach (var field in form.Fields)
                {
                    DocModel obj = new DocModel();
                    obj.DocFieldId = field.Value.Name;
                    obj.DocFieldValue = field.Value.ValueData.Text;
                    InvoiceMainFields.Add(obj);
                }
            }
        }
    }
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
} 

